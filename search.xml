<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BBS项目1</title>
    <url>/2020/10/07/72day/</url>
    <content><![CDATA[<h3 id="数据库表创建及同步"><a href="#数据库表创建及同步" class="headerlink" title="数据库表创建及同步"></a>数据库表创建及同步</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">由于django自带的sqlite数据库对日期不敏感，所以我们换成MySQL</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">先写普通字段</span></span><br><span class="line"><span class="string">之后再写外键字段</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">AbstractUser</span>):</span></span><br><span class="line">    phone = models.BigIntegerField(verbose_name=<span class="string">&#x27;手机号&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 头像</span></span><br><span class="line">    avatar = models.FileField(upload_to=<span class="string">&#x27;avatar/&#x27;</span>,default=<span class="string">&#x27;avatar/default.png&#x27;</span>,verbose_name=<span class="string">&#x27;用户头像&#x27;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给avatar字段传文件对象 该文件会自动存储到avatar文件下 然后avatar字段只保存文件路径avatar/default.png</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    create_time = models.DateField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    blog = models.OneToOneField(to=<span class="string">&#x27;Blog&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    site_name = models.CharField(verbose_name=<span class="string">&#x27;站点名称&#x27;</span>,max_length=<span class="number">32</span>)</span><br><span class="line">    site_title = models.CharField(verbose_name=<span class="string">&#x27;站点标题&#x27;</span>,max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># 简单模拟 带你认识样式内部原理的操作</span></span><br><span class="line">    site_theme = models.CharField(verbose_name=<span class="string">&#x27;站点样式&#x27;</span>,max_length=<span class="number">64</span>)  <span class="comment"># 存css/js的文件路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;文章分类&#x27;</span>,max_length=<span class="number">32</span>)</span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;文章标签&#x27;</span>,max_length=<span class="number">32</span>)</span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;文章标题&#x27;</span>,max_length=<span class="number">64</span>)</span><br><span class="line">    desc = models.CharField(verbose_name=<span class="string">&#x27;文章简介&#x27;</span>,max_length=<span class="number">255</span>)</span><br><span class="line">    <span class="comment"># 文章内容有很多 一般情况下都是使用TextField</span></span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">&#x27;文章内容&#x27;</span>)</span><br><span class="line">    create_time = models.DateField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库字段设计优化</span></span><br><span class="line">    up_num = models.BigIntegerField(verbose_name=<span class="string">&#x27;点赞数&#x27;</span>,default=<span class="number">0</span>)</span><br><span class="line">    down_num = models.BigIntegerField(verbose_name=<span class="string">&#x27;点踩数&#x27;</span>,default=<span class="number">0</span>)</span><br><span class="line">    comment_num = models.BigIntegerField(verbose_name=<span class="string">&#x27;评论数&#x27;</span>,default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 外键字段</span></span><br><span class="line">    blog = models.ForeignKey(to=<span class="string">&#x27;Blog&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    category = models.ForeignKey(to=<span class="string">&#x27;Category&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line">    tags = models.ManyToManyField(to=<span class="string">&#x27;Tag&#x27;</span>,</span><br><span class="line">                                  through=<span class="string">&#x27;Article2Tag&#x27;</span>,</span><br><span class="line">                                  through_fields=(<span class="string">&#x27;article&#x27;</span>,<span class="string">&#x27;tag&#x27;</span>)</span><br><span class="line">                                  )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article2Tag</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    article = models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line">    tag = models.ForeignKey(to=<span class="string">&#x27;Tag&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpAndDown</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;UserInfo&#x27;</span>)</span><br><span class="line">    article = models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line">    is_up = models.BooleanField()  <span class="comment"># 传布尔值 存0/1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    user = models.ForeignKey(to=<span class="string">&#x27;UserInfo&#x27;</span>)</span><br><span class="line">    article = models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line">    content = models.CharField(verbose_name=<span class="string">&#x27;评论内容&#x27;</span>,max_length=<span class="number">255</span>)</span><br><span class="line">    comment_time = models.DateTimeField(verbose_name=<span class="string">&#x27;评论时间&#x27;</span>,auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 自关联</span></span><br><span class="line">    parent = models.ForeignKey(to=<span class="string">&#x27;self&#x27;</span>,null=<span class="literal">True</span>)  <span class="comment"># 有些评论就是根评论</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我们之前是直接在views.py中书写的forms组件代码</span></span><br><span class="line"><span class="string">但是为了接耦合 应该将所有的forms组件代码单独写到一个地方</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果你的项目至始至终只用到一个forms组件那么你可以直接建一个py文件书写即可</span></span><br><span class="line"><span class="string">	myforms.py</span></span><br><span class="line"><span class="string">但是如果你的项目需要使用多个forms组件，那么你可以创建一个文件夹在文件夹内根据</span></span><br><span class="line"><span class="string">forms组件功能的不同创建不同的py文件</span></span><br><span class="line"><span class="string">	myforms文件夹</span></span><br><span class="line"><span class="string">		regform.py</span></span><br><span class="line"><span class="string">		loginform.py</span></span><br><span class="line"><span class="string">		userform.py</span></span><br><span class="line"><span class="string">		orderform.py</span></span><br><span class="line"><span class="string">		...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">request</span>):</span></span><br><span class="line">    form_obj = MyRegForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        back_dic = &#123;<span class="string">&quot;code&quot;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 校验数据是否合法</span></span><br><span class="line">        form_obj = MyRegForm(request.POST)</span><br><span class="line">        <span class="comment"># 判断数据是否合法</span></span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            <span class="comment"># print(form_obj.cleaned_data)  # &#123;&#x27;username&#x27;: &#x27;jason&#x27;, &#x27;password&#x27;: &#x27;123&#x27;, &#x27;confirm_password&#x27;: &#x27;123&#x27;, &#x27;email&#x27;: &#x27;123@qq.com&#x27;&#125;</span></span><br><span class="line">            clean_data = form_obj.cleaned_data  <span class="comment"># 将校验通过的数据字典赋值给一个变量</span></span><br><span class="line">            <span class="comment"># 将字典里面的confirm_password键值对删除</span></span><br><span class="line">            clean_data.pop(<span class="string">&#x27;confirm_password&#x27;</span>)  <span class="comment"># &#123;&#x27;username&#x27;: &#x27;jason&#x27;, &#x27;password&#x27;: &#x27;123&#x27;, &#x27;email&#x27;: &#x27;123@qq.com&#x27;&#125;</span></span><br><span class="line">            <span class="comment"># 用户头像</span></span><br><span class="line">            file_obj = request.FILES.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;针对用户头像一定要判断是否传值 不能直接添加到字典里面去&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> file_obj:</span><br><span class="line">                clean_data[<span class="string">&#x27;avatar&#x27;</span>] = file_obj</span><br><span class="line">            <span class="comment"># 直接操作数据库保存数据</span></span><br><span class="line">            models.UserInfo.objects.create_user(**clean_data)</span><br><span class="line">            back_dic[<span class="string">&#x27;url&#x27;</span>] = <span class="string">&#x27;/login/&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = form_obj.errors</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;register.html&#x27;</span>,locals())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#myfile&quot;</span>).change(function () &#123;</span><br><span class="line">        // 文件阅读器对象</span><br><span class="line">        // <span class="number">1</span> 先生成一个文件阅读器对象</span><br><span class="line">        let myFileReaderObj = new FileReader();</span><br><span class="line">        // <span class="number">2</span> 获取用户上传的头像文件</span><br><span class="line">        let fileObj = $(this)[<span class="number">0</span>].files[<span class="number">0</span>];</span><br><span class="line">        // <span class="number">3</span> 将文件对象交给阅读器对象读取</span><br><span class="line">        myFileReaderObj.readAsDataURL(fileObj)  // 异步操作  IO操作</span><br><span class="line">        // <span class="number">4</span> 利用文件阅读器将文件展示到前端页面  修改src属性</span><br><span class="line">        // 等待文件阅读器加载完毕之后再执行</span><br><span class="line">        myFileReaderObj.onload = function()&#123;</span><br><span class="line">             $(<span class="string">&#x27;#myimg&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>,myFileReaderObj.result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#id_commit&#x27;</span>).click(function () &#123;</span><br><span class="line">        // 发送ajax请求     我们发送的数据中即包含普通的键值也包含文件</span><br><span class="line">        let formDataObj = new FormData();</span><br><span class="line">        // <span class="number">1.</span>添加普通的键值对</span><br><span class="line">        &#123;<span class="comment">#console.log($(&#x27;#myform&#x27;).serializeArray())  // [&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;]  只包含普通键值对#&#125;</span></span><br><span class="line">        $.each($(<span class="string">&#x27;#myform&#x27;</span>).serializeArray(),function (index,obj) &#123;</span><br><span class="line">            &#123;<span class="comment">#console.log(index,obj)#&#125;  // obj = &#123;&#125;</span></span><br><span class="line">            formDataObj.append(obj.name,obj.value)</span><br><span class="line">        &#125;);</span><br><span class="line">        // <span class="number">2.</span>添加文件数据</span><br><span class="line">        formDataObj.append(<span class="string">&#x27;avatar&#x27;</span>,$(<span class="string">&#x27;#myfile&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        // <span class="number">3.</span>发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            type:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data:formDataObj,</span><br><span class="line"></span><br><span class="line">            // 需要指定两个关键性的参数</span><br><span class="line">            contentType:false,</span><br><span class="line">            processData:false,</span><br><span class="line"></span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args.code==<span class="number">1000</span>)&#123;</span><br><span class="line">                    // 跳转到登陆页面</span><br><span class="line">                    window.location.href = args.url</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    // 如何将对应的错误提示展示到对应的input框下面</span><br><span class="line">                    // forms组件渲染的标签的id值都是 id_字段名</span><br><span class="line">                    $.each(args.msg,function (index,obj) &#123;</span><br><span class="line">                        &#123;<span class="comment">#console.log(index,obj)  //  username        [&quot;用户名不能为空&quot;]#&#125;</span></span><br><span class="line">                        let targetId = <span class="string">&#x27;#id_&#x27;</span> + index;</span><br><span class="line">                        $(targetId).next().text(obj[<span class="number">0</span>]).parent().addClass(<span class="string">&#x27;has-error&#x27;</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    // 给所有的input框绑定获取焦点事件</span><br><span class="line">    $(<span class="string">&#x27;input&#x27;</span>).focus(function () &#123;</span><br><span class="line">        // 将input下面的span标签和input外面的div标签修改内容及属性</span><br><span class="line">        $(this).next().text(<span class="string">&#x27;&#x27;</span>).parent().removeClass(<span class="string">&#x27;has-error&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">              </span><br><span class="line"><span class="comment"># 扩展</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一般情况下我们在存储用户文件的时候为了避免文件名冲突的情况</span></span><br><span class="line"><span class="string">会自己给文件名加一个前缀	</span></span><br><span class="line"><span class="string">	uuid</span></span><br><span class="line"><span class="string">	随机字符串</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="登陆功能"><a href="#登陆功能" class="headerlink" title="登陆功能"></a>登陆功能</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">img标签的src属性</span></span><br><span class="line"><span class="string">	1.图片路径</span></span><br><span class="line"><span class="string">	2.url</span></span><br><span class="line"><span class="string">	3.图片的二进制数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们的计算机上面致所有能够输出各式各样的字体样式</span></span><br><span class="line"><span class="string">内部其实对应的是一个个.ttf结尾的文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://www.zhaozi.cn/ai/2019/fontlist.php?ph=1&amp;classid=32&amp;softsq=%E5%85%8D%E8%B4%B9%E5%95%86%E7%94%A8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">图片相关的模块</span></span><br><span class="line"><span class="string">    pip3 install pillow</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw,ImageFont</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Image:生成图片</span></span><br><span class="line"><span class="string">ImageDraw:能够在图片上乱涂乱画</span></span><br><span class="line"><span class="string">ImageFont:控制字体样式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO,StringIO</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">内存管理器模块</span></span><br><span class="line"><span class="string">BytesIO:临时帮你存储数据 返回的时候数据是二进制</span></span><br><span class="line"><span class="string">StringIO:临时帮你存储数据 返回的时候数据是字符串</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random</span>():</span></span><br><span class="line">    <span class="keyword">return</span> random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 推导步骤1:直接获取后端现成的图片二进制数据发送给前端</span></span><br><span class="line">    <span class="comment"># with open(r&#x27;static/img/111.jpg&#x27;,&#x27;rb&#x27;) as f:</span></span><br><span class="line">    <span class="comment">#     data = f.read()</span></span><br><span class="line">    <span class="comment"># return HttpResponse(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 推导步骤2:利用pillow模块动态产生图片</span></span><br><span class="line">    <span class="comment"># img_obj = Image.new(&#x27;RGB&#x27;,(430,35),&#x27;green&#x27;)</span></span><br><span class="line">    <span class="comment"># img_obj = Image.new(&#x27;RGB&#x27;,(430,35),get_random())</span></span><br><span class="line">    <span class="comment"># # 先将图片对象保存起来</span></span><br><span class="line">    <span class="comment"># with open(&#x27;xxx.png&#x27;,&#x27;wb&#x27;) as f:</span></span><br><span class="line">    <span class="comment">#     img_obj.save(f,&#x27;png&#x27;)</span></span><br><span class="line">    <span class="comment"># # 再将图片对象读取出来</span></span><br><span class="line">    <span class="comment"># with open(&#x27;xxx.png&#x27;,&#x27;rb&#x27;) as f:</span></span><br><span class="line">    <span class="comment">#     data = f.read()</span></span><br><span class="line">    <span class="comment"># return HttpResponse(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 推导步骤3:文件存储繁琐IO操作效率低  借助于内存管理器模块</span></span><br><span class="line">    <span class="comment"># img_obj = Image.new(&#x27;RGB&#x27;, (430, 35), get_random())</span></span><br><span class="line">    <span class="comment"># io_obj = BytesIO()  # 生成一个内存管理器对象  你可以看成是文件句柄</span></span><br><span class="line">    <span class="comment"># img_obj.save(io_obj,&#x27;png&#x27;)</span></span><br><span class="line">    <span class="comment"># return HttpResponse(io_obj.getvalue())  # 从内存管理器中读取二进制的图片数据返回给前端</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最终步骤4:写图片验证码</span></span><br><span class="line">    img_obj = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">430</span>, <span class="number">35</span>), get_random())</span><br><span class="line">    img_draw = ImageDraw.Draw(img_obj)  <span class="comment"># 产生一个画笔对象</span></span><br><span class="line">    img_font = ImageFont.truetype(<span class="string">&#x27;static/font/222.ttf&#x27;</span>,<span class="number">30</span>)  <span class="comment"># 字体样式 大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机验证码  五位数的随机验证码  数字 小写字母 大写字母</span></span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        random_upper = chr(random.randint(<span class="number">65</span>,<span class="number">90</span>))</span><br><span class="line">        random_lower = chr(random.randint(<span class="number">97</span>,<span class="number">122</span>))</span><br><span class="line">        random_int = str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">        <span class="comment"># 从上面三个里面随机选择一个</span></span><br><span class="line">        tmp = random.choice([random_lower,random_upper,random_int])</span><br><span class="line">        <span class="comment"># 将产生的随机字符串写入到图片上</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        为什么一个个写而不是生成好了之后再写</span></span><br><span class="line"><span class="string">        因为一个个写能够控制每个字体的间隙 而生成好之后再写的话</span></span><br><span class="line"><span class="string">        间隙就没法控制了</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        img_draw.text((i*<span class="number">60</span>+<span class="number">60</span>,<span class="number">-2</span>),tmp,get_random(),img_font)</span><br><span class="line">        <span class="comment"># 拼接随机字符串</span></span><br><span class="line">        code += tmp</span><br><span class="line">    print(code)</span><br><span class="line">    <span class="comment"># 随机验证码在登陆的视图函数里面需要用到 要比对 所以要找地方存起来并且其他视图函数也能拿到</span></span><br><span class="line">    request.session[<span class="string">&#x27;code&#x27;</span>] = code</span><br><span class="line">    io_obj = BytesIO()</span><br><span class="line">    img_obj.save(io_obj,<span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(io_obj.getvalue())</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#id_img&quot;</span>).click(function () &#123;</span><br><span class="line">        // <span class="number">1</span> 先获取标签之前的src</span><br><span class="line">        let oldVal = $(this).attr(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">        $(this).attr(<span class="string">&#x27;src&#x27;</span>,oldVal += <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>





























]]></content>
      <categories>
        <category>---python</category>
      </categories>
      <tags>
        <tag>bbs</tag>
        <tag>全栈开发，python</tag>
      </tags>
  </entry>
  <entry>
    <title>BBS项目2</title>
    <url>/2020/10/07/73day/</url>
    <content><![CDATA[<h1 id="今日内容概要"><a href="#今日内容概要" class="headerlink" title="今日内容概要"></a>今日内容概要</h1><ul>
<li>登陆功能</li>
<li>bbs首页搭建<ul>
<li>导航条用户功能</li>
</ul>
</li>
<li>admin后台管理</li>
<li>首页文章展示</li>
<li>用户头像展示(media配置)</li>
<li>图片防盗链</li>
<li>个人站点页面搭建</li>
<li>侧边栏展示功能<ul>
<li>标签</li>
<li>分类</li>
<li>日期</li>
</ul>
</li>
<li>侧边栏筛选功能</li>
<li>将侧边栏制作成inclusion_tag</li>
</ul>
<h3 id="登陆功能"><a href="#登陆功能" class="headerlink" title="登陆功能"></a>登陆功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        back_dic = &#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">1000</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        code = request.POST.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        <span class="comment"># 1 先校验验证码是否正确      自己决定是否忽略            统一转大写或者小写再比较</span></span><br><span class="line">        <span class="keyword">if</span> request.session.get(<span class="string">&#x27;code&#x27;</span>).upper() == code.upper():</span><br><span class="line">            <span class="comment"># 2 校验用户名和密码是否正确</span></span><br><span class="line">            user_obj = auth.authenticate(request,username=username,password=password)</span><br><span class="line">            <span class="keyword">if</span> user_obj:</span><br><span class="line">                <span class="comment"># 保存用户状态</span></span><br><span class="line">                auth.login(request,user_obj)</span><br><span class="line">                back_dic[<span class="string">&#x27;url&#x27;</span>] = <span class="string">&#x27;/home/&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2000</span></span><br><span class="line">                back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">3000</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;验证码错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="首页搭建"><a href="#首页搭建" class="headerlink" title="首页搭建"></a>首页搭建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.动态展示用户名称</span></span><br><span class="line">          &#123;% <span class="keyword">if</span> request.user.is_authenticated %&#125;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&#123;&#123; request.user.username &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;dropdown&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;更多操作 &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">          &lt;ul class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;修改密码&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;修改头像&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;后台管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li role=&quot;separator&quot; class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;退出登陆&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">          &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &#x27;reg&#x27; %&#125;&quot;&gt;注册&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;&gt;登陆&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">          </span><br><span class="line"><span class="comment"># 更多操作</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="admin后台管理"><a href="#admin后台管理" class="headerlink" title="admin后台管理"></a>admin后台管理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django给你提供了一个可视化的界面用来让你方便的对你的模型表</span></span><br><span class="line"><span class="string">进行数据的增删改查操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果你先想要使用amdin后台管理操作模型表</span></span><br><span class="line"><span class="string">你需要先注册你的模型表告诉admin你需要操作哪些表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">去你的应用下的admin.py中注册你的模型表</span></span><br><span class="line"><span class="string">	from django.contrib import admin</span></span><br><span class="line"><span class="string">  from app01 import models</span></span><br><span class="line"><span class="string">  # Register your models here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  admin.site.register(models.UserInfo)</span></span><br><span class="line"><span class="string">  admin.site.register(models.Blog)</span></span><br><span class="line"><span class="string">  admin.site.register(models.Category)</span></span><br><span class="line"><span class="string">  admin.site.register(models.Tag)</span></span><br><span class="line"><span class="string">  admin.site.register(models.Article)</span></span><br><span class="line"><span class="string">  admin.site.register(models.Article2Tag)</span></span><br><span class="line"><span class="string">  admin.site.register(models.UpAndDown)</span></span><br><span class="line"><span class="string">  admin.site.register(models.Comment)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># admin会给每一个注册了的模型表自动生成增删改查四条url</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/admin/app01/userinfo/  查</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/admin/app01/userinfo/add/  增</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/admin/app01/userinfo/<span class="number">1</span>/change/  改</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/admin/app01/userinfo/<span class="number">1</span>/delete/  删</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/admin/app01/blog/  查</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/admin/app01/blog/add/  增</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/admin/app01/blog/<span class="number">1</span>/change/  改</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/admin/app01/blog/<span class="number">1</span>/delete/  删</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">关键点就在于urls.py中的第一条自带的url</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前期我们需要自己手动苦逼的录入数据，自己克服一下</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.数据绑定尤其需要注意的是用户和个人站点不要忘记绑定了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.标签和文章</span></span><br><span class="line">	千万不要把别人的文章绑定标签</span><br></pre></td></tr></table></figure>

<h3 id="用户头像展示"><a href="#用户头像展示" class="headerlink" title="用户头像展示"></a>用户头像展示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1 网址所使用的静态文件默认放在static文件夹下</span></span><br><span class="line"><span class="string">2 用户上传的静态文件也应该单独放在某个文件夹下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">media配置</span></span><br><span class="line"><span class="string">	该配置可以让用户上传的所有文件都固定存放在某一个指定的文件夹下</span></span><br><span class="line"><span class="string">	# 配置用户上传的文件存储位置</span></span><br><span class="line"><span class="string">	MEDIA_ROOT = os.path.join(BASE_DIR,&#x27;media&#x27;)  # 文件名 随你 自己</span></span><br><span class="line"><span class="string">	会自动创建多级目录</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">如何开设后端指定文件夹资源</span></span><br><span class="line"><span class="string">	首先你需要自己去urls.py书写固定的代码</span></span><br><span class="line"><span class="string">	from django.views.static import serve</span></span><br><span class="line"><span class="string">	from BBS14 import settings</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	# 暴露后端指定文件夹资源</span></span><br><span class="line"><span class="string">  url(r&#x27;^media/(?P&lt;path&gt;.*)&#x27;,serve,&#123;&#x27;document_root&#x27;:settings.MEDIA_ROOT&#125;)</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="图片防盗链"><a href="#图片防盗链" class="headerlink" title="图片防盗链"></a>图片防盗链</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何避免别的网站直接通过本网站的url访问本网站资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单的防盗</span></span><br><span class="line">	我可以做到请求来的时候先看看当前请求是从哪个网站过来的</span><br><span class="line">  如果是本网站那么正常访问</span><br><span class="line">  如果是其他网站直接拒绝</span><br><span class="line">  	请求头里面有一个专门记录请求来自于哪个网址的参数</span><br><span class="line">    	Referer: http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/xxx/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何避免</span></span><br><span class="line">	<span class="number">1.</span>要么修改请求头referer</span><br><span class="line">  <span class="number">2.</span>直接写爬虫把对方网址的所有资源直接下载到我们自己的服务器上</span><br></pre></td></tr></table></figure>

<h3 id="个人站点"><a href="#个人站点" class="headerlink" title="个人站点"></a>个人站点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全是每个用户都可以有自己的站点样式</span></span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/media/css/&#123;&#123; blog.site_theme &#125;&#125;/&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id		content 			  create_time					month</span><br><span class="line"><span class="number">1</span>			<span class="number">111</span>							 <span class="number">2020</span><span class="number">-11</span><span class="number">-11</span>					<span class="number">2020</span><span class="number">-11</span></span><br><span class="line"><span class="number">2</span>			<span class="number">222</span>							 <span class="number">2020</span><span class="number">-11</span><span class="number">-12</span>					<span class="number">2020</span><span class="number">-11</span></span><br><span class="line"><span class="number">3</span>			<span class="number">333</span>							 <span class="number">2020</span><span class="number">-11</span><span class="number">-13</span>					<span class="number">2020</span><span class="number">-11</span></span><br><span class="line"><span class="number">4</span>			<span class="number">444</span>							 <span class="number">2020</span><span class="number">-11</span><span class="number">-14</span>					<span class="number">2020</span><span class="number">-11</span></span><br><span class="line"><span class="number">5</span>			<span class="number">555</span>							 <span class="number">2020</span><span class="number">-11</span><span class="number">-15</span>					<span class="number">2020</span><span class="number">-11</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">django官网提供的一个orm语法</span></span><br><span class="line"><span class="string">	from django.db.models.functions import TruncMonth</span></span><br><span class="line"><span class="string">-官方提供</span></span><br><span class="line"><span class="string">			from django.db.models.functions import TruncMonth</span></span><br><span class="line"><span class="string">			Sales.objects</span></span><br><span class="line"><span class="string">			.annotate(month=TruncMonth(&#x27;timestamp&#x27;))  # Truncate to month and add to select list</span></span><br><span class="line"><span class="string">			.values(&#x27;month&#x27;)  # Group By month</span></span><br><span class="line"><span class="string">			.annotate(c=Count(&#x27;id&#x27;))  # Select the count of the grouping</span></span><br><span class="line"><span class="string">			.values(&#x27;month&#x27;, &#x27;c&#x27;)  # (might be redundant, haven&#x27;t tested) select month and count</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">时区问题报错</span></span><br><span class="line"><span class="string">TIME_ZONE = &#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">USE_TZ = True</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="侧边栏筛选功能"><a href="#侧边栏筛选功能" class="headerlink" title="侧边栏筛选功能"></a>侧边栏筛选功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/jason/tag/Python/  				 标签</span><br><span class="line">https://www.cnblogs.com/jason/category/<span class="number">850028.</span>html 分类</span><br><span class="line">https://www.cnblogs.com/jason/archive/<span class="number">2016</span>/<span class="number">10.</span>html 日期</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">https://www.cnblogs.com/jason/tag/<span class="number">1</span>/  				 标签</span><br><span class="line">https://www.cnblogs.com/jason/category/<span class="number">1</span> 			 分类</span><br><span class="line">https://www.cnblogs.com/jason/archive/<span class="number">2020</span><span class="number">-11</span>/ 日期</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">site</span>(<span class="params">request,username,**kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :param username:</span></span><br><span class="line"><span class="string">    :param kwargs: 如果该参数有值 也就意味着需要对article_list做额外的筛选操作</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 先校验当前用户名对应的个人站点是否存在</span></span><br><span class="line">    user_obj = models.UserInfo.objects.filter(username=username).first()</span><br><span class="line">    <span class="comment"># 用户如果不存在应该返回一个404页面</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_obj:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;errors.html&#x27;</span>)</span><br><span class="line">    blog = user_obj.blog</span><br><span class="line">    <span class="comment"># 查询当前个人站点下的所有的文章</span></span><br><span class="line">    article_list = models.Article.objects.filter(blog=blog)  <span class="comment"># queryset对象 侧边栏的筛选其实就是对article_list再进一步筛选</span></span><br><span class="line">    <span class="keyword">if</span> kwargs:</span><br><span class="line">        <span class="comment"># print(kwargs)  # &#123;&#x27;condition&#x27;: &#x27;tag&#x27;, &#x27;param&#x27;: &#x27;1&#x27;&#125;</span></span><br><span class="line">        condition = kwargs.get(<span class="string">&#x27;condition&#x27;</span>)</span><br><span class="line">        param = kwargs.get(<span class="string">&#x27;param&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断用户到底想按照哪个条件筛选数据</span></span><br><span class="line">        <span class="keyword">if</span> condition == <span class="string">&#x27;category&#x27;</span>:</span><br><span class="line">            article_list = article_list.filter(category_id=param)</span><br><span class="line">        <span class="keyword">elif</span> condition == <span class="string">&#x27;tag&#x27;</span>:</span><br><span class="line">            article_list = article_list.filter(tags__id=param)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            year,month = param.split(<span class="string">&#x27;-&#x27;</span>)  <span class="comment"># 2020-11  [2020,11]</span></span><br><span class="line">            article_list = article_list.filter(create_time__year=year,create_time__month=month)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1 查询当前用户所有的分类及分类下的文章数</span></span><br><span class="line">    category_list = models.Category.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">&#x27;article__pk&#x27;</span>)).values_list(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;count_num&#x27;</span>,<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(category_list)  # &lt;QuerySet [(&#x27;jason的分类一&#x27;, 2), (&#x27;jason的分类二&#x27;, 1), (&#x27;jason的分类三&#x27;, 1)]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2 查询当前用户所有的标签及标签下的文章数</span></span><br><span class="line">    tag_list = models.Tag.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">&#x27;article__pk&#x27;</span>)).values_list(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;count_num&#x27;</span>,<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(tag_list)  # &lt;QuerySet [(&#x27;tank的标签一&#x27;, 1), (&#x27;tank的标签二&#x27;, 1), (&#x27;tank的标签三&#x27;, 2)]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3 按照年月统计所有的文章</span></span><br><span class="line">    date_list = models.Article.objects.filter(blog=blog).annotate(month=TruncMonth(<span class="string">&#x27;create_time&#x27;</span>)).values(<span class="string">&#x27;month&#x27;</span>).annotate(count_num=Count(<span class="string">&#x27;pk&#x27;</span>)).values_list(<span class="string">&#x27;month&#x27;</span>,<span class="string">&#x27;count_num&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(date_list)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;site.html&#x27;</span>,locals())</span><br></pre></td></tr></table></figure>























]]></content>
      <categories>
        <category>---python</category>
      </categories>
      <tags>
        <tag>bbs</tag>
        <tag>全栈开发</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>BBS项目3</title>
    <url>/2020/10/08/74day/</url>
    <content><![CDATA[<h3 id="文章详情页"><a href="#文章详情页" class="headerlink" title="文章详情页"></a>文章详情页</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># url设计</span></span><br><span class="line">/username/article/<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先验证url是否会被其他url顶替</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章详情页和个人站点基本一致 所以用模版继承</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏的渲染需要传输数据才能渲染 并且该侧边栏在很多页面都需要使用</span></span><br><span class="line">	<span class="number">1.</span>哪个地方用就拷贝需要的代码(不推荐 有点繁琐)</span><br><span class="line">  </span><br><span class="line">  <span class="number">2.</span>将侧边栏制作成inclusion_tag	</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  步骤</span></span><br><span class="line"><span class="string">  	1.在应用下创建一个名字必须叫templatetags文件夹</span></span><br><span class="line"><span class="string">  	2.在该文件夹内创建一个任意名称的py文件</span></span><br><span class="line"><span class="string">  	3.在该py文件内先固定写两行代码</span></span><br><span class="line"><span class="string">  		from django import template</span></span><br><span class="line"><span class="string">  		register = template.Library()</span></span><br><span class="line"><span class="string">  		# 自定义过滤器</span></span><br><span class="line"><span class="string">  		# 自定义标签</span></span><br><span class="line"><span class="string">  		# 自定义inclusion_tag</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="comment"># 自定义inclusion_tag</span></span><br><span class="line"><span class="meta">@register.inclusion_tag(&#x27;left_menu.html&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left_menu</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="comment"># 构造侧边栏需要的数据</span></span><br><span class="line">    user_obj = models.UserInfo.objects.filter(username=username).first()</span><br><span class="line">    blog = user_obj.blog</span><br><span class="line">    <span class="comment"># 1 查询当前用户所有的分类及分类下的文章数</span></span><br><span class="line">    category_list = models.Category.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">&#x27;article__pk&#x27;</span>)).values_list(</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;count_num&#x27;</span>, <span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(category_list)  # &lt;QuerySet [(&#x27;jason的分类一&#x27;, 2), (&#x27;jason的分类二&#x27;, 1), (&#x27;jason的分类三&#x27;, 1)]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2 查询当前用户所有的标签及标签下的文章数</span></span><br><span class="line">    tag_list = models.Tag.objects.filter(blog=blog).annotate(count_num=Count(<span class="string">&#x27;article__pk&#x27;</span>)).values_list(<span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">                                                                                                         <span class="string">&#x27;count_num&#x27;</span>,</span><br><span class="line">                                                                                                         <span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(tag_list)  # &lt;QuerySet [(&#x27;tank的标签一&#x27;, 1), (&#x27;tank的标签二&#x27;, 1), (&#x27;tank的标签三&#x27;, 2)]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3 按照年月统计所有的文章</span></span><br><span class="line">    date_list = models.Article.objects.filter(blog=blog).annotate(month=TruncMonth(<span class="string">&#x27;create_time&#x27;</span>)).values(</span><br><span class="line">        <span class="string">&#x27;month&#x27;</span>).annotate(count_num=Count(<span class="string">&#x27;pk&#x27;</span>)).values_list(<span class="string">&#x27;month&#x27;</span>, <span class="string">&#x27;count_num&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(date_list)</span></span><br><span class="line">    <span class="keyword">return</span> locals()</span><br></pre></td></tr></table></figure>

<h3 id="文章点赞点踩"><a href="#文章点赞点踩" class="headerlink" title="文章点赞点踩"></a>文章点赞点踩</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">浏览器上你看到的花里胡哨的页面，内部都是HTML(前端)代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">那现在我们的文章内容应该写什么？？？	&gt;&gt;&gt; html代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何拷贝文章</span></span><br><span class="line"><span class="string">	copy outerhtml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.拷贝文章</span></span><br><span class="line"><span class="string">2.拷贝点赞点踩</span></span><br><span class="line"><span class="string">	1.拷贝前端点赞点踩图标 只拷了html</span></span><br><span class="line"><span class="string">	2.css也要拷贝</span></span><br><span class="line"><span class="string">		由于有图片防盗链的问题 所以将图片直接下载到本地</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">课下思考:</span></span><br><span class="line"><span class="string">	前端如何区分用户是点了赞还是点了踩</span></span><br><span class="line"><span class="string">	1.给标签各自绑定一个事件</span></span><br><span class="line"><span class="string">		两个标签对应的代码其实基本一样，仅仅是是否点赞点踩这一个参数不一样而已</span></span><br><span class="line"><span class="string">	2.二合一</span></span><br><span class="line"><span class="string">		给两个标签绑定一个事件</span></span><br><span class="line"><span class="string">		//   给所有的action类绑定事件</span></span><br><span class="line"><span class="string">  	$(&#x27;.action&#x27;).click(function () &#123;</span></span><br><span class="line"><span class="string">            alert($(this).hasClass(&#x27;diggit&#x27;))</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">由于点赞点踩内部有一定的业务逻辑，所以后端单独开设视图函数处理</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 个人建议:写代码先把所有正确的逻辑写完再去考虑错误的逻辑 不要试图两者兼得</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up_or_down</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.校验用户是否登陆</span></span><br><span class="line"><span class="string">    2.判断当前文章是否是当前用户自己写的(自己不能点自己的文章)</span></span><br><span class="line"><span class="string">    3.当前用户是否已经给当前文章点过了</span></span><br><span class="line"><span class="string">    4.操作数据库了</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        back_dic = &#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">1000</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 1 先判断当前用户是否登陆</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated():</span><br><span class="line">            article_id = request.POST.get(<span class="string">&#x27;article_id&#x27;</span>)</span><br><span class="line">            is_up = request.POST.get(<span class="string">&#x27;is_up&#x27;</span>)</span><br><span class="line">            <span class="comment"># print(is_up,type(is_up))  # true &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">            is_up = json.loads(is_up)  <span class="comment"># 记得转换</span></span><br><span class="line">            <span class="comment"># print(is_up, type(is_up))  # True &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line">            <span class="comment"># 2 判断当前文章是否是当前用户自己写的  根据文章id查询文章对象 根据文章对象查作者 根request.user比对</span></span><br><span class="line">            article_obj = models.Article.objects.filter(pk=article_id).first()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> article_obj.blog.userinfo == request.user:</span><br><span class="line">                <span class="comment"># 3 校验当前用户是否已经点了      哪个地方记录了用户到底点没点</span></span><br><span class="line">                is_click = models.UpAndDown.objects.filter(user=request.user,article=article_obj)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> is_click:</span><br><span class="line">                    <span class="comment"># 4 操作数据库 记录数据      要同步操作普通字段</span></span><br><span class="line">                    <span class="comment"># 判断当前用户点了赞还是踩 从而决定给哪个字段加一</span></span><br><span class="line">                    <span class="keyword">if</span> is_up:</span><br><span class="line">                        <span class="comment"># 给点赞数加一</span></span><br><span class="line">                        models.Article.objects.filter(pk=article_id).update(up_num = F(<span class="string">&#x27;up_num&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;点赞成功&#x27;</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># 给点踩数加一</span></span><br><span class="line">                        models.Article.objects.filter(pk=article_id).update(down_num=F(<span class="string">&#x27;down_num&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">                        back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;点踩成功&#x27;</span></span><br><span class="line">                    <span class="comment"># 操作点赞点踩表</span></span><br><span class="line">                    models.UpAndDown.objects.create(user=request.user,article=article_obj,is_up=is_up)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">1001</span></span><br><span class="line">                    back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;你已经点过了,不能再点了&#x27;</span>  <span class="comment"># 这里你可以做的更加的详细 提示用户到底点了赞还是点了踩</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">1002</span></span><br><span class="line">                back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;你个臭不要脸的!&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_dic[<span class="string">&#x27;code&#x27;</span>] = <span class="number">1003</span></span><br><span class="line">            back_dic[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;请先&lt;a href=&quot;/login/&quot;&gt;登陆&lt;/a&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(back_dic)</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        //   给所有的action类绑定事件</span><br><span class="line">        $(<span class="string">&#x27;.action&#x27;</span>).click(function () &#123;</span><br><span class="line">            &#123;<span class="comment">#alert($(this).hasClass(&#x27;diggit&#x27;))#&#125;</span></span><br><span class="line">            let isUp = $(this).hasClass(<span class="string">&#x27;diggit&#x27;</span>);</span><br><span class="line">            let $div = $(this);</span><br><span class="line">            // 朝后端发送ajax请求</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url:<span class="string">&#x27;/up_or_down/&#x27;</span>,</span><br><span class="line">                type:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                data:&#123;</span><br><span class="line">                    <span class="string">&#x27;article_id&#x27;</span>:<span class="string">&#x27;&#123;&#123; article_obj.pk &#125;&#125;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;is_up&#x27;</span>:isUp,</span><br><span class="line">                    <span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>:<span class="string">&#x27;&#123;&#123; csrf_token &#125;&#125;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                success:function (args) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(args.code == <span class="number">1000</span>)&#123;</span><br><span class="line">                            $(<span class="string">&#x27;#digg_tips&#x27;</span>).text(args.msg)</span><br><span class="line">                            // 将前端的数字加一</span><br><span class="line">                            // 先获取到之前的数字</span><br><span class="line">                            let oldNum = $div.children().text();  // 文本 是字符类型</span><br><span class="line">                            // 易错点</span><br><span class="line">                            $div.children().text(Number(oldNum) + <span class="number">1</span>)  // 字符串拼接了 <span class="number">1</span>+<span class="number">1</span> = <span class="number">11</span>  <span class="number">11</span> + <span class="number">1</span> = <span class="number">111</span></span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            $(<span class="string">&#x27;#digg_tips&#x27;</span>).html(args.msg)</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="文章评论"><a href="#文章评论" class="headerlink" title="文章评论"></a>文章评论</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我们先写根评论</span></span><br><span class="line"><span class="string">再写子评论</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">点击评论按钮需要将评论框里面的内容清空</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">根评论有两步渲染方式</span></span><br><span class="line"><span class="string">	1.DOM临时渲染</span></span><br><span class="line"><span class="string">	2.页面刷新render渲染</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">子评论</span></span><br><span class="line"><span class="string">	点击回复按钮发生了几件事</span></span><br><span class="line"><span class="string">		1.评论框自动聚焦</span></span><br><span class="line"><span class="string">		2.将回复按钮所在的那一行评论人的姓名</span></span><br><span class="line"><span class="string">			@username</span></span><br><span class="line"><span class="string">		3.评论框内部自动换行</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">根评论子评论都是点击一个按钮朝后端提交数据的</span></span><br><span class="line"><span class="string">	parent_id</span></span><br><span class="line"><span class="string">根评论子评论区别在哪？</span></span><br><span class="line"><span class="string">	parent_id</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>---python</category>
      </categories>
      <tags>
        <tag>bbs</tag>
        <tag>全栈开发</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
